version: "3.3"

services:
  npm:
    image: "jc21/nginx-proxy-manager:latest"
    restart: unless-stopped
    ports:
      # These ports are in format <host-port>:<container-port>
      - "80:80" # Public HTTP Port
      - "443:443" # Public HTTPS Port
      - "81:81" # Admin Web Port
      # Add any other Stream port you want to expose
      # - '21:21' # FTP

    # Uncomment the next line if you uncomment anything in the section
    # environment:
    # Uncomment this if you want to change the location of
    # the SQLite DB file within the container
    # DB_SQLITE_FILE: "/data/database.sqlite"

    # Uncomment this if IPv6 is not enabled on your host
    # DISABLE_IPV6: 'true'

    volumes:
      - ${DATA}/npm:/data
      - ${DATA}/npm/letsencrypt:/etc/letsencrypt
  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TIMEZONE}
      - WEBUI_PORT=8080
      - TORRENTING_PORT=6881
    volumes:
      - ${CONTAINERS}/qbittorrent/config:/config
      - ${DATA}:/downloads
    ports:
      - 8080:8080
      - 6881:6881
      - 6881:6881/udp
    restart: unless-stopped

  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    network_mode: host
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${HOME}/.docker/config.json:/config.json
    command: --label-enable --cleanup --schedule "0 0 4 * * *"
    restart: unless-stopped

  emby:
    image: lscr.io/linuxserver/emby:latest
    container_name: emby
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=true
      - traefik.http.routers.emby.rule=Host(`emby.${DOMAIN}`)
      - traefik.http.routers.emby.entrypoints=websecured
      - traefik.http.services.emby.loadbalancer.server.port=8096
      - traefik.http.routers.emby.tls.certresolver=myresolver
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TIMEZONE}
    volumes:
      - ${CONTAINERS}/emby/config:/config
      - ${DATA}:/data
    ports:
      - 8096:8096
    devices:
      - /dev/dri:/dev/dri #optional
    restart: unless-stopped

  sonarr:
    image: linuxserver/sonarr
    container_name: sonarr
    ports:
      - 8989:8989
    depends_on:
      - prowlarr
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=true
      - traefik.http.routers.sonarr.rule=Host(`sonarr.${DOMAIN}`)
      - traefik.http.routers.sonarr.entrypoints=websecured
      - traefik.http.routers.sonarr.tls.certresolver=myresolver
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    volumes:
      - ${CONTAINERS}/sonarr/config:/config
      - ${CONTAINERS}/sonarr/empty:/downloads # Not used
      - ${DATA}:/data
    restart: unless-stopped

  radarr:
    image: linuxserver/radarr
    container_name: radarr
    ports:
      - 7878:7878
    depends_on:
      - prowlarr
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=true
      - traefik.http.routers.radarr.rule=Host(`radarr.${DOMAIN}`)
      - traefik.http.routers.radarr.entrypoints=websecured
      - traefik.http.routers.radarr.tls.certresolver=myresolver
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    volumes:
      - ${CONTAINERS}/radarr/config:/config
      - ${DATA}:/data
    restart: unless-stopped

  prowlarr:
    image: linuxserver/prowlarr
    container_name: prowlarr
    ports:
      - 9696:9696
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=true
      - traefik.http.routers.prowlarr.rule=Host(`prowlarr.${DOMAIN}`)
      - traefik.http.routers.prowlarr.entrypoints=websecured
      - traefik.http.routers.prowlarr.tls.certresolver=myresolver
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
      - AUTO_UPDATE=true
    volumes:
      - ${CONTAINERS}/prowlarr/config:/config
    restart: unless-stopped

  portainer:
    image: portainer/portainer-ce
    container_name: portainer
    ports:
      - 9000:9000
      - 8000:8000
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=true
      - traefik.http.routers.portainer.rule=Host(`portainer.${DOMAIN}`)
      - traefik.http.routers.portainer.entrypoints=websecured
      - traefik.http.routers.portainer.tls.certresolver=myresolver
      - traefik.http.services.portainer.loadbalancer.server.port=9000
    restart: always
    command: -H unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${CONTAINERS}/portainer:/data

  portainer_agent:
    image: portainer/agent
    container_name: portainer-agent
    ports:
      - 9001:9001
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    restart: always
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=false

  organizr:
    image: organizr/organizr
    container_name: organizr
    ports:
      - 9983:80
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=true
      - traefik.http.routers.orzanizr.rule=Host(`mediabox.${DOMAIN}`)
      - traefik.http.routers.orzanizr.entrypoints=websecured
      - traefik.http.routers.orzanizr.tls.certresolver=myresolver
      - traefik.http.services.organizr.loadbalancer.server.port=80
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    volumes:
      - ${CONTAINERS}/organizr:/config
    restart: unless-stopped

  duplicati:
    image: linuxserver/duplicati
    container_name: duplicati
    ports:
      - 8200:8200
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=true
      - traefik.http.routers.duplicati.rule=Host(`duplicati.${DOMAIN}`)
      - traefik.http.routers.duplicati.entrypoints=websecured
      - traefik.http.routers.duplicati.tls.certresolver=myresolver
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    volumes:
      - ${CONTAINERS}/duplicati/config:/config
      - ${CONTAINERS}/duplicati/backups:/backups
      - /:/source
    restart: unless-stopped
